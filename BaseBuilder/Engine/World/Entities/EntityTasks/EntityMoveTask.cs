using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BaseBuilder.Engine.State;
using BaseBuilder.Engine.Math2D;
using BaseBuilder.Engine.World.WorldObject.Entities;
using BaseBuilder.Engine.Logic.Pathfinders;
using BaseBuilder.Engine.World.Entities.MobileEntities;
using BaseBuilder.Engine.Math2D.Double;
using static BaseBuilder.Engine.Math2D.Double.MathUtilsD2D;
using Lidgren.Network;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Audio;

namespace BaseBuilder.Engine.World.Entities.EntityTasks
{
    /// <summary>
    /// Describes a task for a mobile entity to move to a specified point. Returns success
    /// if it reaches that point, returns failure if a path cannot be found / the entity is
    /// blocked.
    /// </summary>
    public class EntityMoveTask : IEntityTask
    {
        
        public string TaskDescription
        {
            get
            {
                return $"Moving {Entity.GetType().Name} (id={Entity.ID}) to {Destination}";
            }
        }

        public string TaskName
        {
            get
            {
                return "Move";
            }
        }

        public string TaskStatus
        {
            get
            {
                return "Moving";
            }
        }

        protected int EntityID;
        protected MobileEntity Entity;
        protected PointI2D Destination;

        protected UnitPath Path;
        protected bool Finished;
        protected bool FailedToFindPath;

        protected Random random;
        protected bool PlaySFX;
        protected int NextSFXCounter;

        /// <summary>
        /// Initializes a move task that will calculate a path on the next SimulateTimePassing
        /// </summary>
        /// <param name="entity">The entity which will be moving</param>
        /// <param name="destination">Where the entity is going</param>
        public EntityMoveTask(MobileEntity entity, PointI2D destination)
        {
            Entity = entity;
            EntityID = entity.ID;
            Destination = destination;

            Path = null;
            FailedToFindPath = false;
            Finished = false;

            random = new Random();
        }

        /// <summary>
        /// Initializes an entity move task that was created by a call to Write on an outgoing message. Does
        /// not load the entity from the gamestate until the next call to SimulateTimePassing (meaning this can
        /// be used in the constructor of an Entity who is trying to load its own tasks)
        /// </summary>
        /// <param name="gameState">The game state</param>
        /// <param name="message">The message</param>
        public EntityMoveTask(SharedGameState gameState, NetIncomingMessage message)
        {
            EntityID = message.ReadInt32();
            Destination = new PointI2D(message);

            Path = new UnitPath(message);
            Finished = message.ReadBoolean();
            FailedToFindPath = message.ReadBoolean();

            random = new Random();
        }

        /// <summary>
        /// <para>Writes this move task to the specified message, except the entity is saved solely via its
        /// EntityID. This means this function is safe to call from the entity whose task this is (a 
        /// common case).</para>
        /// </summary>
        /// <param name="message">The message to write to.</param>
        public void Write(NetOutgoingMessage message)
        {
            message.Write(EntityID);
            Destination.Write(message);
            Path.Write(message);
            message.Write(Finished);
            message.Write(FailedToFindPath);
        }


        public void Reset(SharedGameState gameState)
        {
            Path = null;
            FailedToFindPath = false;
            Finished = false;
        }

        /// <summary>
        /// Attempts to move the entity linearly between points on a path generated by gameState.Pathfinder
        /// on the first call to SimulateTimePassing.
        /// 
        /// If a path cannot be found, returns EntityTaskStatus.Failure.
        /// If the entity is still moving, returns EntityTaskStatus.Running
        /// If the entity has reached its destination this frame, returns EntityTaskStatus.Success
        /// </summary>
        /// <param name="gameState">The game state</param>
        /// <param name="timeMS">The time in milliseconds</param>
        /// <returns>Success if entity at destination, Failure if no path is found, Running if the entity is still moving.</returns>
        public EntityTaskStatus SimulateTimePassing(SharedGameState gameState, int timeMS)
        {
            if(Entity == null)
            {
                Entity = gameState.World.MobileEntities.Find((me) => me.ID == EntityID);
            }

            if (FailedToFindPath || Finished)
                throw new InvalidProgramException("I should have been reset!");

            if(Path == null)
            {
                Path = gameState.Pathfinder.CalculatePath(gameState.World, Entity, new PointI2D((int)Entity.Position.X, (int)Entity.Position.Y), Destination);
                if(Path == null)
                {
                    FailedToFindPath = true;
                    return EntityTaskStatus.Failure;
                }
            }

            var curr = Path.GetCurrent();
            if(EpsilonEqual(Entity.Position.X, curr.X) && EpsilonEqual(Entity.Position.Y, curr.Y))
            {
                Finished = !Path.Next();

                if (Finished)
                {
                    Path = null;
                    return EntityTaskStatus.Success;
                }

                curr = Path.GetCurrent();
            }

            ImplMove(gameState, curr, timeMS);
            
            bool move = !gameState.World.UpdateTileCollisions(Entity);
            if(move)
            {
                NextSFXCounter--;

                if(NextSFXCounter <= 0)
                {
                    PlaySFX = true;
                    NextSFXCounter = random.Next(3) + 9;
                }
            }
            if (Finished)
            {
                Path = null;
                // fix rounding
                Entity.Position.X = Destination.X;
                Entity.Position.Y = Destination.Y;
                return EntityTaskStatus.Success;
            }
            return EntityTaskStatus.Running;
        }

        /// <summary>
        /// This function handles the meat of the movement. This function is built recursively;
        /// if the entity is nearly at the next grid location it will not require the full moveMS
        /// to start the next path. In this case, ImplMove calculates the time that is spent to move
        /// to the next grid location, calls Path.Next(), and calls itself with the remaining move time
        /// and the new part of the path.
        /// 
        /// Finished may be set to true if the destination is reached.
        /// 
        /// This will crash if the entity is at curr (or within E-06 units of it).
        /// </summary>
        /// <param name="gameState">The game state</param>
        /// <param name="curr">Where the entity is currently</param>
        /// <param name="moveMS">The maximum amount of milliseconds of movement the entity has left this frame</param>
        private void ImplMove(SharedGameState gameState, PointI2D curr, int moveMS)
        {
            var moveVec = new VectorD2D(curr.X - Entity.Position.X, curr.Y - Entity.Position.Y);

            var speedUnitsPerMS = Entity.SpeedUnitsPerMS; 

            var unitsMaxThisTick = speedUnitsPerMS * moveMS;
            var unitsSqMaxThisTick = unitsMaxThisTick * unitsMaxThisTick;
            
            if(EpsilonLessThan(moveVec.MagnitudeSquared, unitsSqMaxThisTick))
            {
                int msToMoveMoveVec = (int)Math.Round(moveVec.Magnitude / speedUnitsPerMS);

                Entity.Position.X = curr.X;
                Entity.Position.Y = curr.Y;

                Finished = !Path.Next();
                if (Finished)
                    return;

                int msRemaining = moveMS - msToMoveMoveVec;

                if (msRemaining > 0)
                    ImplMove(gameState, Path.GetCurrent(), msRemaining);
            }else
            {
                var posOffset = moveVec.UnitVector.Scale(unitsMaxThisTick);
                Entity.Position.X += posOffset.DeltaX;
                Entity.Position.Y += posOffset.DeltaY;
            }
        }

        public void Update(ContentManager content, SharedGameState sharedGameState, LocalGameState localGameState)
        {
            if (PlaySFX)
            {
                var sfxNm = $"Sounds/footstep05";
                var sfx = content.Load<SoundEffect>(sfxNm);
                var inst = sfx.CreateInstance();
                inst.Volume = 0.5f;
                inst.Play();
                PlaySFX = false;
            }
        }
    }
}
